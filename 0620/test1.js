//알고리즘 수업 - 알고리즘의 수행 시간 6[24267번]
const fs = require("fs");
const n = BigInt(fs.readFileSync("/dev/stdin").toString().trim());

let result = 0n;
if (n >= 3n) {
  result = (n * (n - 1n) * (n - 2n)) / 6n;
}

console.log(result.toString());
console.log(3);

//

// 문제: 세중첩 for문에서 count++가 몇 번 실행되는지 계산
// for (let i = 1; i <= n - 2; i++) {
//   for (let j = i + 1; j <= n - 1; j++) {
//     for (let k = j + 1; k <= n; k++) {
//       count++;
//     }
//   }
// }
// 이 반복 횟수는 결국 "i < j < k" 를 만족하는 모든 조합의 수입니다.
// 수학적으로는 "n개 중 3개를 고르는 조합" → 이항계수공식 사용
// 이항계수 공식:  nC3 = n! / (3! * (n-3)!)
//            = n(n-1)(n-2)(n-3)! / (6 * (n-3)!)   ← 여기서 3! = 6
//            → (n-3)!는 분자와 분모에서 약분됨
// 최종 공식    = n(n-1)(n-2) / 6

// 에러 1
// 조합 계산은 n >= 3일 때만 가능
// 그렇지 않으면 3개을 고를 수 없어 0이 됨.

// 에러 2
//| 코드 타입    | 정확도               | 적합한 상황                   |
//| --------- | ---------------------| ------------------------ |
//| `Number` | 최대 $9×10^{15}$ 정확  | 작은 `n`, 243등             |
//| `BigInt` | 자릿수 무제한 정확       | `n ≤ 500,000` 계산 시 꼭 필요 |
